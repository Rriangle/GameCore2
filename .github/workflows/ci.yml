name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/*, hotfix/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: '部署環境'
        required: true
        default: 'dev'
        type: choice
        options:
        - local
        - dev
        - staging
        - prod

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18.x'
  DOCKER_REGISTRY: 'ghcr.io'
  IMAGE_NAME: 'gamecore'

jobs:
  # =============================================================================
  # 程式碼品質檢查
  # =============================================================================
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest

    - name: Install .NET dependencies
      run: dotnet restore

    - name: Install frontend dependencies
      run: |
        cd frontend
        pnpm install --frozen-lockfile

    - name: Run .NET format check
      run: dotnet format --verify-no-changes

    - name: Run .NET build
      run: dotnet build --no-restore --configuration Release

    - name: Run frontend build
      run: |
        cd frontend
        pnpm run build

  # =============================================================================
  # 後端測試
  # =============================================================================
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          SA_PASSWORD: "YourStrong@Passw0rd"
          ACCEPT_EULA: "Y"
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong@Passw0rd -Q 'SELECT 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 1433:1433

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Run backend tests
      run: dotnet test --no-build --verbosity normal --configuration Release --collect:"XPlat Code Coverage" --results-directory ./TestResults

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Backend Test Results
        path: TestResults/
        reporter: java-junit

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: TestResults/

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ./TestResults/**/coverage.cobertura.xml
        flags: backend
        name: backend-coverage

  # =============================================================================
  # 前端測試
  # =============================================================================
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: |
        cd frontend
        pnpm install --frozen-lockfile

    - name: Run linting
      run: |
        cd frontend
        pnpm run lint

    - name: Run type check
      run: |
        cd frontend
        pnpm run type-check

    - name: Run unit tests
      run: |
        cd frontend
        pnpm run test:unit --coverage --reporter=verbose

    - name: Run build
      run: |
        cd frontend
        pnpm run build

    - name: Upload frontend test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-test-results
        path: frontend/coverage/

  # =============================================================================
  # 安全性掃描
  # =============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Run .NET security scan
      run: |
        dotnet tool install --global dotnet-security-scan
        dotnet security-scan

    - name: Run npm audit
      run: |
        cd frontend
        npm audit --audit-level moderate

    - name: Run Snyk security scan
      uses: snyk/actions/dotnet@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # =============================================================================
  # Docker 映像建置
  # =============================================================================
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: src/GameCore.Api/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: Dockerfile.dev
        push: true
        tags: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # =============================================================================
  # 部署到開發環境
  # =============================================================================
  deploy-dev:
    name: Deploy to Dev Environment
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: dev
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure
      run: |
        az deployment group create \
          --resource-group gamecore-dev-rg \
          --template-file azure-deploy.yml \
          --parameters environment=dev \
          --parameters imageTag=${{ github.sha }}

    - name: Run smoke tests
      run: |
        # 等待部署完成
        sleep 60
        # 執行基本功能測試
        curl -f http://gamecore-dev-api.azurewebsites.net/health

  # =============================================================================
  # 部署到生產環境
  # =============================================================================
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: prod
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure
      run: |
        az deployment group create \
          --resource-group gamecore-prod-rg \
          --template-file azure-deploy.yml \
          --parameters environment=prod \
          --parameters imageTag=${{ github.sha }}

    - name: Run production tests
      run: |
        # 等待部署完成
        sleep 120
        # 執行生產環境測試
        curl -f https://gamecore-prod-api.azurewebsites.net/health

  # =============================================================================
  # 通知與報告
  # =============================================================================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan, build-docker]
    if: always()

    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#gamecore-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        text: |
          🚀 GameCore CI/CD Pipeline 完成
          📍 分支: ${{ github.ref }}
          🔗 提交: ${{ github.sha }}
          ✅ 狀態: ${{ job.status }}
          📊 詳情: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

    - name: Create deployment summary
      if: always()
      run: |
        echo "## 🚀 GameCore 部署摘要" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**分支**: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
        echo "**提交**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**觸發者**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 執行結果" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ 程式碼品質檢查: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ 後端測試: ${{ needs.backend-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ 前端測試: ${{ needs.frontend-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ 安全性掃描: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Docker 建置: ${{ needs.build-docker.result }}" >> $GITHUB_STEP_SUMMARY
